{"ast":null,"code":"var _jsxFileName = \"D:\\\\HK3-N2\\\\ANTOANHETHONGWEB\\\\BT5\\\\frontend\\\\src\\\\pages\\\\MyBorrowsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\n// Import API functions\nimport { getMyBorrows, createBorrowSlip, submitBorrowSlip, deleteBorrowSlip } from '../services/api';\n// Import Auth context hook\nimport { useAuth } from '../contexts/AuthContext';\n// Import Link for navigation\nimport { Link } from 'react-router-dom'; // <<< Import Link\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction MyBorrowsPage({\n  borrowSelection = [],\n  onRemoveBook = () => {},\n  onClearSelection = () => {}\n}) {\n  _s();\n  // State for the list of existing borrowing slips\n  const [slips, setSlips] = useState([]);\n  // State for loading the initial list of slips\n  const [loading, setLoading] = useState(true);\n  // State for general errors (fetch slips, delete/submit existing slip)\n  const [error, setError] = useState('');\n  // State for tracking which specific slip action is in progress (delete/submit)\n  const [actionLoading, setActionLoading] = useState(null); // Stores the ID of the slip being processed\n  // State for loading when creating a new slip from selection\n  const [createSlipLoading, setCreateSlipLoading] = useState(false);\n  // State for errors specific to creating a slip from selection\n  const [createSlipError, setCreateSlipError] = useState('');\n  // Get the logout function from auth context\n  const {\n    logout\n  } = useAuth();\n\n  // --- Function to Fetch Existing Borrowing Slips ---\n  const fetchBorrows = useCallback(async (showLoading = false) => {\n    // Optionally show loading indicator if called after an action (not initial load)\n    if (showLoading) setLoading(true);\n    setError(''); // Clear previous general errors\n    console.log(\"MyBorrowsPage: Fetching existing slips...\");\n    try {\n      var _response$data;\n      const response = await getMyBorrows();\n      setSlips(response.data || []); // Ensure slips is always an array\n      console.log(\"MyBorrowsPage: Slips fetched successfully.\", ((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.length) || 0);\n    } catch (err) {\n      console.error(\"MyBorrowsPage: Failed to fetch borrowing slips:\", err);\n      if (err.response && (err.response.status === 401 || err.response.status === 403)) {\n        setError('Your session may have expired or you have insufficient permissions. Please log in again.');\n        // Consider automatically logging out or redirecting\n        // setTimeout(logout, 3000);\n      } else {\n        setError('Failed to load your borrowing slips. Please try refreshing the page.');\n      }\n    } finally {\n      // Only set loading to false on initial load or if explicitly requested\n      setLoading(false);\n    }\n  }, [logout]); // logout is a dependency for the error handling part\n\n  // --- Effect to Fetch Slips on Initial Mount ---\n  useEffect(() => {\n    fetchBorrows(true); // Fetch data and show loading on initial mount\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []); // Run only once on mount\n\n  // --- Function to Create a New Slip from Current Selection ---\n  const handleCreateSlipFromSelection = async () => {\n    // Prevent creation if selection is empty\n    if (!Array.isArray(borrowSelection) || borrowSelection.length === 0) {\n      alert(\"Your selection is empty. Please select some books from the 'Books' page first.\");\n      return;\n    }\n    setCreateSlipLoading(true); // Start loading indicator for this action\n    setCreateSlipError(''); // Clear previous creation errors\n    setError(''); // Clear general page errors\n\n    try {\n      var _response$data2;\n      // Extract book IDs from the selection\n      const bookIds = borrowSelection.map(item => item.id);\n      console.log(\"MyBorrowsPage: Creating slip with selected book IDs:\", bookIds);\n\n      // Call the API to create the slip, passing the book IDs\n      // Assumes the backend endpoint '/api/borrow/slips' accepts { bookIds: [...] } in the POST body\n      const response = await createBorrowSlip({\n        bookIds\n      });\n      const newSlipId = response === null || response === void 0 ? void 0 : (_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : _response$data2.slipId; // Get the new slip ID from response if available\n\n      alert(`Borrowing slip${newSlipId ? ` (ID: ${newSlipId})` : ''} created successfully with ${borrowSelection.length} book(s)! It's now in 'draft' status.`);\n      onClearSelection(); // Call the function passed from App.js to clear the selection state\n      await fetchBorrows(true); // Reload the list of slips to show the new one (show loading)\n    } catch (err) {\n      var _err$response, _err$response$data;\n      console.error(\"MyBorrowsPage: Failed to create slip from selection:\", err);\n      // Display specific error from API or a generic one\n      setCreateSlipError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || 'Failed to create the borrowing slip. Please check the books or try again.');\n    } finally {\n      setCreateSlipLoading(false); // Stop the loading indicator for this action\n    }\n  };\n\n  // --- Function to Submit an Existing Draft Slip ---\n  const handleSubmitSlip = async slipId => {\n    setActionLoading(slipId); // Indicate loading for this specific slip\n    setError(''); // Clear general errors\n\n    // Confirmation dialog\n    if (!window.confirm(`Are you sure you want to submit Slip ID ${slipId}? The availability of books will be checked.`)) {\n      setActionLoading(null); // Cancel loading if user cancels\n      return;\n    }\n    try {\n      await submitBorrowSlip(slipId); // Call the API\n      alert(`Slip ID ${slipId} submitted successfully!`);\n      await fetchBorrows(true); // Reload the list to reflect status change (show loading)\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      console.error(`MyBorrowsPage: Failed to submit slip ID ${slipId}:`, err);\n      // Display specific error from API or a generic one\n      setError(((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || `Failed to submit Slip ID ${slipId}. It might be out of stock or an error occurred.`);\n    } finally {\n      setActionLoading(null); // Stop loading for this specific slip\n    }\n  };\n\n  // --- Function to Delete an Existing Draft Slip ---\n  const handleDeleteSlip = async slipId => {\n    setActionLoading(slipId); // Indicate loading for this specific slip\n    setError(''); // Clear general errors\n\n    // Confirmation dialog\n    if (!window.confirm(`Are you sure you want to delete Draft Slip ID ${slipId}? This action cannot be undone.`)) {\n      setActionLoading(null); // Cancel loading if user cancels\n      return;\n    }\n    try {\n      await deleteBorrowSlip(slipId); // Call the API\n      alert(`Draft Slip ID ${slipId} deleted successfully!`);\n      await fetchBorrows(true); // Reload the list (show loading)\n    } catch (err) {\n      var _err$response3, _err$response3$data;\n      console.error(`MyBorrowsPage: Failed to delete draft slip ID ${slipId}:`, err);\n      // Display specific error from API or a generic one\n      setError(((_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : (_err$response3$data = _err$response3.data) === null || _err$response3$data === void 0 ? void 0 : _err$response3$data.message) || `Failed to delete Draft Slip ID ${slipId}. Please try again.`);\n    } finally {\n      setActionLoading(null); // Stop loading for this specific slip\n    }\n  };\n\n  // --- UI Rendering ---\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"My Borrowing Area\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"borrow-selection-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Your Current Book Selection\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this), createSlipError && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-message\",\n        children: createSlipError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 29\n      }, this), !Array.isArray(borrowSelection) || borrowSelection.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"You haven't selected any books yet. Visit the \", /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/books\",\n          children: \"Books page\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 59\n        }, this), \" to add items.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"selection-list\",\n          children: borrowSelection.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"selection-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: [item.title, \" (ID: \", item.id, \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => {\n                console.log(`MyBorrowsPage: Removing book ID ${item.id} from selection.`);\n                onRemoveBook(item.id); // Call function from props\n              },\n              className: \"danger remove-button\",\n              disabled: createSlipLoading // Disable while creating slip\n              ,\n              children: \"Remove\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 19\n            }, this)]\n          }, item.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"selection-actions\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleCreateSlipFromSelection,\n            disabled: createSlipLoading || borrowSelection.length === 0 // Disable if loading or empty\n            ,\n            children: createSlipLoading ? 'Creating Slip...' : `Create Draft Slip (${borrowSelection.length} items)`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              console.log(\"MyBorrowsPage: Clearing selection.\");\n              onClearSelection(); // Call function from props\n            },\n            className: \"secondary\",\n            style: {\n              marginLeft: '10px'\n            },\n            disabled: createSlipLoading || borrowSelection.length === 0 // Disable if loading or empty\n            ,\n            children: \"Clear Selection\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"My Existing Borrowing Slips\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 17\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading your borrowing slips...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 9\n    }, this) : !Array.isArray(slips) || slips.length === 0 ?\n    /*#__PURE__*/\n    // Show message if no slips are found\n    _jsxDEV(\"p\", {\n      children: \"You have no borrowing slips recorded yet.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 9\n    }, this) :\n    /*#__PURE__*/\n    // Render the list of slips\n    _jsxDEV(\"ul\", {\n      className: \"slips-list\",\n      children: slips.map(slip => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"slip-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"slip-info\",\n          children: [\"Slip ID: \", slip.id, \" - Status: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            className: `status-${slip.status}`,\n            children: slip.status\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 46\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n            children: [\"Created: \", new Date(slip.created_at).toLocaleString(), \" | Items: \", slip.item_count, slip.submitted_at && ` | Submitted: ${new Date(slip.submitted_at).toLocaleString()}`]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"slip-actions\",\n          children: slip.status === 'draft' && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleSubmitSlip(slip.id)\n              // Disable if another action is loading OR this slip is loading OR it's empty\n              ,\n              disabled: actionLoading === slip.id || !!actionLoading || slip.item_count === 0,\n              title: slip.item_count === 0 ? \"Cannot submit an empty slip\" : \"Submit this slip for approval\",\n              children: actionLoading === slip.id ? 'Processing...' : 'Submit'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"danger\",\n              onClick: () => handleDeleteSlip(slip.id)\n              // Disable if another action is loading OR this slip is loading\n              ,\n              disabled: actionLoading === slip.id || !!actionLoading,\n              children: actionLoading === slip.id ? 'Processing...' : 'Delete Draft'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 247,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 15\n        }, this)]\n      }, slip.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"style\", {\n      jsx: true,\n      children: `\n        .borrow-selection-box {\n          border: 1px dashed #ccc;\n          padding: 15px;\n          margin-bottom: 30px;\n          border-radius: 5px;\n          background-color: #f9f9f9;\n        }\n        .selection-list {\n          max-height: 200px; /* Allow more space */\n          overflow-y: auto;\n          margin-bottom: 15px;\n          padding-bottom: 10px;\n          border-bottom: 1px solid #eee;\n        }\n        .selection-item {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          padding: 8px 5px; /* More padding */\n          margin-bottom: 5px; /* Space between items */\n          background: none;\n          border: none; /* Remove default li border */\n          border-bottom: 1px solid #eee; /* Add separator */\n        }\n        .selection-item:last-child {\n            border-bottom: none; /* Remove border for last item */\n        }\n        .remove-button {\n          padding: 3px 8px;\n          font-size: 0.85em;\n        }\n        .selection-actions button {\n          margin-top: 10px; /* Space above buttons */\n        }\n        .slips-list {\n            margin-top: 15px;\n        }\n        .slip-item { /* Styles for the main slip list items */\n             border: 1px solid #ddd;\n        }\n        .slip-actions button {\n          margin-left: 5px;\n        }\n        /* Add styles for different statuses */\n        .status-draft { color: #6c757d; }\n        .status-submitted { color: #007bff; }\n        .status-approved { color: #ffc107; } /* Example */\n        .status-borrowed { color: #28a745; }\n        .status-returned { color: #17a2b8; }\n        .status-rejected { color: #dc3545; }\n        .status-overdue { color: #dc3545; font-weight: bold; }\n\n      `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 5\n  }, this);\n}\n_s(MyBorrowsPage, \"cQL0KjBUib4pF2VFj6Ki7FPN26E=\", false, function () {\n  return [useAuth];\n});\n_c = MyBorrowsPage;\nexport default MyBorrowsPage;\nvar _c;\n$RefreshReg$(_c, \"MyBorrowsPage\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","getMyBorrows","createBorrowSlip","submitBorrowSlip","deleteBorrowSlip","useAuth","Link","jsxDEV","_jsxDEV","Fragment","_Fragment","MyBorrowsPage","borrowSelection","onRemoveBook","onClearSelection","_s","slips","setSlips","loading","setLoading","error","setError","actionLoading","setActionLoading","createSlipLoading","setCreateSlipLoading","createSlipError","setCreateSlipError","logout","fetchBorrows","showLoading","console","log","_response$data","response","data","length","err","status","handleCreateSlipFromSelection","Array","isArray","alert","_response$data2","bookIds","map","item","id","newSlipId","slipId","_err$response","_err$response$data","message","handleSubmitSlip","window","confirm","_err$response2","_err$response2$data","handleDeleteSlip","_err$response3","_err$response3$data","className","children","fileName","_jsxFileName","lineNumber","columnNumber","to","title","onClick","disabled","style","marginLeft","slip","Date","created_at","toLocaleString","item_count","submitted_at","jsx","_c","$RefreshReg$"],"sources":["D:/HK3-N2/ANTOANHETHONGWEB/BT5/frontend/src/pages/MyBorrowsPage.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\n// Import API functions\r\nimport { getMyBorrows, createBorrowSlip, submitBorrowSlip, deleteBorrowSlip } from '../services/api';\r\n// Import Auth context hook\r\nimport { useAuth } from '../contexts/AuthContext';\r\n// Import Link for navigation\r\nimport { Link } from 'react-router-dom'; // <<< Import Link\r\n\r\nfunction MyBorrowsPage({ borrowSelection = [], onRemoveBook = () => {}, onClearSelection = () => {} }) {\r\n  // State for the list of existing borrowing slips\r\n  const [slips, setSlips] = useState([]);\r\n  // State for loading the initial list of slips\r\n  const [loading, setLoading] = useState(true);\r\n  // State for general errors (fetch slips, delete/submit existing slip)\r\n  const [error, setError] = useState('');\r\n  // State for tracking which specific slip action is in progress (delete/submit)\r\n  const [actionLoading, setActionLoading] = useState(null); // Stores the ID of the slip being processed\r\n  // State for loading when creating a new slip from selection\r\n  const [createSlipLoading, setCreateSlipLoading] = useState(false);\r\n  // State for errors specific to creating a slip from selection\r\n  const [createSlipError, setCreateSlipError] = useState('');\r\n  // Get the logout function from auth context\r\n  const { logout } = useAuth();\r\n\r\n  // --- Function to Fetch Existing Borrowing Slips ---\r\n  const fetchBorrows = useCallback(async (showLoading = false) => {\r\n    // Optionally show loading indicator if called after an action (not initial load)\r\n    if (showLoading) setLoading(true);\r\n    setError(''); // Clear previous general errors\r\n    console.log(\"MyBorrowsPage: Fetching existing slips...\");\r\n    try {\r\n      const response = await getMyBorrows();\r\n      setSlips(response.data || []); // Ensure slips is always an array\r\n      console.log(\"MyBorrowsPage: Slips fetched successfully.\", response.data?.length || 0);\r\n    } catch (err) {\r\n      console.error(\"MyBorrowsPage: Failed to fetch borrowing slips:\", err);\r\n      if (err.response && (err.response.status === 401 || err.response.status === 403)) {\r\n        setError('Your session may have expired or you have insufficient permissions. Please log in again.');\r\n        // Consider automatically logging out or redirecting\r\n        // setTimeout(logout, 3000);\r\n      } else {\r\n        setError('Failed to load your borrowing slips. Please try refreshing the page.');\r\n      }\r\n    } finally {\r\n      // Only set loading to false on initial load or if explicitly requested\r\n       setLoading(false);\r\n    }\r\n  }, [logout]); // logout is a dependency for the error handling part\r\n\r\n  // --- Effect to Fetch Slips on Initial Mount ---\r\n  useEffect(() => {\r\n    fetchBorrows(true); // Fetch data and show loading on initial mount\r\n     // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []); // Run only once on mount\r\n\r\n  // --- Function to Create a New Slip from Current Selection ---\r\n  const handleCreateSlipFromSelection = async () => {\r\n    // Prevent creation if selection is empty\r\n    if (!Array.isArray(borrowSelection) || borrowSelection.length === 0) {\r\n      alert(\"Your selection is empty. Please select some books from the 'Books' page first.\");\r\n      return;\r\n    }\r\n\r\n    setCreateSlipLoading(true); // Start loading indicator for this action\r\n    setCreateSlipError('');     // Clear previous creation errors\r\n    setError('');               // Clear general page errors\r\n\r\n    try {\r\n      // Extract book IDs from the selection\r\n      const bookIds = borrowSelection.map(item => item.id);\r\n      console.log(\"MyBorrowsPage: Creating slip with selected book IDs:\", bookIds);\r\n\r\n      // Call the API to create the slip, passing the book IDs\r\n      // Assumes the backend endpoint '/api/borrow/slips' accepts { bookIds: [...] } in the POST body\r\n      const response = await createBorrowSlip({ bookIds });\r\n      const newSlipId = response?.data?.slipId; // Get the new slip ID from response if available\r\n\r\n      alert(`Borrowing slip${newSlipId ? ` (ID: ${newSlipId})` : ''} created successfully with ${borrowSelection.length} book(s)! It's now in 'draft' status.`);\r\n\r\n      onClearSelection(); // Call the function passed from App.js to clear the selection state\r\n      await fetchBorrows(true); // Reload the list of slips to show the new one (show loading)\r\n\r\n    } catch (err) {\r\n      console.error(\"MyBorrowsPage: Failed to create slip from selection:\", err);\r\n      // Display specific error from API or a generic one\r\n      setCreateSlipError(err.response?.data?.message || 'Failed to create the borrowing slip. Please check the books or try again.');\r\n    } finally {\r\n      setCreateSlipLoading(false); // Stop the loading indicator for this action\r\n    }\r\n  };\r\n\r\n  // --- Function to Submit an Existing Draft Slip ---\r\n  const handleSubmitSlip = async (slipId) => {\r\n    setActionLoading(slipId); // Indicate loading for this specific slip\r\n    setError(''); // Clear general errors\r\n\r\n    // Confirmation dialog\r\n    if (!window.confirm(`Are you sure you want to submit Slip ID ${slipId}? The availability of books will be checked.`)) {\r\n      setActionLoading(null); // Cancel loading if user cancels\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await submitBorrowSlip(slipId); // Call the API\r\n      alert(`Slip ID ${slipId} submitted successfully!`);\r\n      await fetchBorrows(true); // Reload the list to reflect status change (show loading)\r\n    } catch (err) {\r\n      console.error(`MyBorrowsPage: Failed to submit slip ID ${slipId}:`, err);\r\n      // Display specific error from API or a generic one\r\n      setError(err.response?.data?.message || `Failed to submit Slip ID ${slipId}. It might be out of stock or an error occurred.`);\r\n    } finally {\r\n      setActionLoading(null); // Stop loading for this specific slip\r\n    }\r\n  };\r\n\r\n  // --- Function to Delete an Existing Draft Slip ---\r\n  const handleDeleteSlip = async (slipId) => {\r\n    setActionLoading(slipId); // Indicate loading for this specific slip\r\n    setError(''); // Clear general errors\r\n\r\n    // Confirmation dialog\r\n    if (!window.confirm(`Are you sure you want to delete Draft Slip ID ${slipId}? This action cannot be undone.`)) {\r\n      setActionLoading(null); // Cancel loading if user cancels\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await deleteBorrowSlip(slipId); // Call the API\r\n      alert(`Draft Slip ID ${slipId} deleted successfully!`);\r\n      await fetchBorrows(true); // Reload the list (show loading)\r\n    } catch (err) {\r\n      console.error(`MyBorrowsPage: Failed to delete draft slip ID ${slipId}:`, err);\r\n      // Display specific error from API or a generic one\r\n      setError(err.response?.data?.message || `Failed to delete Draft Slip ID ${slipId}. Please try again.`);\r\n    } finally {\r\n      setActionLoading(null); // Stop loading for this specific slip\r\n    }\r\n  };\r\n\r\n\r\n  // --- UI Rendering ---\r\n  return (\r\n    <div className=\"container\">\r\n      <h2>My Borrowing Area</h2>\r\n\r\n      {/* --- Section for Current Book Selection --- */}\r\n      <div className=\"borrow-selection-box\">\r\n        <h3>Your Current Book Selection</h3>\r\n        {/* Display error specific to creating slip from selection */}\r\n        {createSlipError && <p className=\"error-message\">{createSlipError}</p>}\r\n\r\n        {/* Check if selection array exists and has items */}\r\n        {!Array.isArray(borrowSelection) || borrowSelection.length === 0 ? (\r\n          <p>\r\n            You haven't selected any books yet. Visit the <Link to=\"/books\">Books page</Link> to add items.\r\n          </p>\r\n        ) : (\r\n          <>\r\n            {/* List of selected books */}\r\n            <ul className=\"selection-list\">\r\n              {borrowSelection.map(item => (\r\n                <li key={item.id} className=\"selection-item\">\r\n                  <span>{item.title} (ID: {item.id})</span>\r\n                  {/* Button to remove a book from selection */}\r\n                  <button\r\n                    onClick={() => {\r\n                        console.log(`MyBorrowsPage: Removing book ID ${item.id} from selection.`);\r\n                        onRemoveBook(item.id); // Call function from props\r\n                    }}\r\n                    className=\"danger remove-button\"\r\n                    disabled={createSlipLoading} // Disable while creating slip\r\n                  >\r\n                    Remove\r\n                  </button>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n            {/* Actions for the current selection */}\r\n            <div className=\"selection-actions\">\r\n              <button\r\n                onClick={handleCreateSlipFromSelection}\r\n                disabled={createSlipLoading || borrowSelection.length === 0} // Disable if loading or empty\r\n              >\r\n                {createSlipLoading ? 'Creating Slip...' : `Create Draft Slip (${borrowSelection.length} items)`}\r\n              </button>\r\n              <button\r\n                onClick={() => {\r\n                    console.log(\"MyBorrowsPage: Clearing selection.\");\r\n                    onClearSelection(); // Call function from props\r\n                }}\r\n                className=\"secondary\"\r\n                style={{ marginLeft: '10px' }}\r\n                disabled={createSlipLoading || borrowSelection.length === 0} // Disable if loading or empty\r\n              >\r\n                Clear Selection\r\n              </button>\r\n            </div>\r\n          </>\r\n        )}\r\n      </div>\r\n      {/* ------------------------------------ */}\r\n\r\n\r\n      {/* --- Section for Existing Borrowing Slips --- */}\r\n      <h3>My Existing Borrowing Slips</h3>\r\n      {/* Display general page errors (fetch, delete, submit) */}\r\n      {error && <p className=\"error-message\">{error}</p>}\r\n\r\n      {/* Show loading indicator while fetching slips */}\r\n      {loading ? (\r\n        <div className=\"loading\">Loading your borrowing slips...</div>\r\n      ) : !Array.isArray(slips) || slips.length === 0 ? (\r\n        // Show message if no slips are found\r\n        <p>You have no borrowing slips recorded yet.</p>\r\n      ) : (\r\n        // Render the list of slips\r\n        <ul className=\"slips-list\">\r\n          {slips.map((slip) => (\r\n            <li key={slip.id} className=\"slip-item\">\r\n              {/* Information about the slip */}\r\n              <div className=\"slip-info\">\r\n                Slip ID: {slip.id} - Status: <strong className={`status-${slip.status}`}>{slip.status}</strong>\r\n                <br/>\r\n                <small>\r\n                  Created: {new Date(slip.created_at).toLocaleString()} |\r\n                  Items: {slip.item_count}\r\n                  {slip.submitted_at && ` | Submitted: ${new Date(slip.submitted_at).toLocaleString()}`}\r\n                  {/* Add other dates as needed */}\r\n                </small>\r\n              </div>\r\n              {/* Actions available for the slip */}\r\n              <div className=\"slip-actions\">\r\n                {/* Actions only for slips in 'draft' status */}\r\n                {slip.status === 'draft' && (\r\n                  <>\r\n                    {/* Submit Button */}\r\n                    <button\r\n                      onClick={() => handleSubmitSlip(slip.id)}\r\n                      // Disable if another action is loading OR this slip is loading OR it's empty\r\n                      disabled={actionLoading === slip.id || !!actionLoading || slip.item_count === 0}\r\n                      title={slip.item_count === 0 ? \"Cannot submit an empty slip\" : \"Submit this slip for approval\"}\r\n                    >\r\n                      {/* Show loading text if this slip is being processed */}\r\n                      {actionLoading === slip.id ? 'Processing...' : 'Submit'}\r\n                    </button>\r\n                    {/* Delete Button */}\r\n                    <button\r\n                      className=\"danger\"\r\n                      onClick={() => handleDeleteSlip(slip.id)}\r\n                      // Disable if another action is loading OR this slip is loading\r\n                      disabled={actionLoading === slip.id || !!actionLoading}\r\n                    >\r\n                      {actionLoading === slip.id ? 'Processing...' : 'Delete Draft'}\r\n                    </button>\r\n                  </>\r\n                )}\r\n                 {/* TODO: Add \"View Details\" button for other statuses if needed */}\r\n                 {/* {slip.status !== 'draft' && (\r\n                     <button className=\"secondary\">View Details</button>\r\n                 )} */}\r\n              </div>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n\r\n      {/* CSS (using regular classes now, ensure they are in index.css or a module) */}\r\n      <style jsx>{`\r\n        .borrow-selection-box {\r\n          border: 1px dashed #ccc;\r\n          padding: 15px;\r\n          margin-bottom: 30px;\r\n          border-radius: 5px;\r\n          background-color: #f9f9f9;\r\n        }\r\n        .selection-list {\r\n          max-height: 200px; /* Allow more space */\r\n          overflow-y: auto;\r\n          margin-bottom: 15px;\r\n          padding-bottom: 10px;\r\n          border-bottom: 1px solid #eee;\r\n        }\r\n        .selection-item {\r\n          display: flex;\r\n          justify-content: space-between;\r\n          align-items: center;\r\n          padding: 8px 5px; /* More padding */\r\n          margin-bottom: 5px; /* Space between items */\r\n          background: none;\r\n          border: none; /* Remove default li border */\r\n          border-bottom: 1px solid #eee; /* Add separator */\r\n        }\r\n        .selection-item:last-child {\r\n            border-bottom: none; /* Remove border for last item */\r\n        }\r\n        .remove-button {\r\n          padding: 3px 8px;\r\n          font-size: 0.85em;\r\n        }\r\n        .selection-actions button {\r\n          margin-top: 10px; /* Space above buttons */\r\n        }\r\n        .slips-list {\r\n            margin-top: 15px;\r\n        }\r\n        .slip-item { /* Styles for the main slip list items */\r\n             border: 1px solid #ddd;\r\n        }\r\n        .slip-actions button {\r\n          margin-left: 5px;\r\n        }\r\n        /* Add styles for different statuses */\r\n        .status-draft { color: #6c757d; }\r\n        .status-submitted { color: #007bff; }\r\n        .status-approved { color: #ffc107; } /* Example */\r\n        .status-borrowed { color: #28a745; }\r\n        .status-returned { color: #17a2b8; }\r\n        .status-rejected { color: #dc3545; }\r\n        .status-overdue { color: #dc3545; font-weight: bold; }\r\n\r\n      `}</style>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MyBorrowsPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}