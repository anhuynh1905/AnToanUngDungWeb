{"ast":null,"code":"import axios from 'axios';\n\n// Đặt URL backend của bạn ở đây.\n// Nếu bạn đặt nó trong .env, hãy đọc từ process.env.REACT_APP_API_URL\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000/api';\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Interceptor để tự động thêm token vào các yêu cầu cần xác thực\napiClient.interceptors.request.use(config => {\n  const token = localStorage.getItem('authToken');\n  console.log('[Axios Interceptor] Checking for token. Found:', !!token); // Log xem có token không\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n    console.log('[Axios Interceptor] Token added to header for URL:', config.url); // Log URL được thêm token\n  } else {\n    console.log('[Axios Interceptor] No token found in localStorage for URL:', config.url);\n  }\n  return config;\n}, error => {\n  console.error('[Axios Interceptor] Request error:', error); // Log lỗi request interceptor\n  return Promise.reject(error);\n});\n\n// --- Hàm gọi API ---\n\n// Auth\nexport const loginUser = credentials => apiClient.post('/auth/login', credentials);\nexport const registerUser = userData => apiClient.post('/auth/register', userData);\n// Optional: Thêm hàm verify token nếu có endpoint /api/auth/verify hoặc /api/users/me\n\n// Books\nexport const getBooks = () => apiClient.get('/books');\nexport const createBook = bookData => apiClient.post('/books', bookData);\nexport const updateBook = (bookId, bookData) => apiClient.put(`/books/${bookId}`, bookData);\nexport const deleteBook = bookId => apiClient.delete(`/books/${bookId}`);\n\n// Categories (Cần cho dropdown)\nexport const getCategories = () => apiClient.get('/categories');\n\n// Borrows\nexport const getMyBorrows = () => apiClient.get('/borrow/slips');\nexport const createBorrowSlip = (data = {}) => apiClient.post('/borrow/slips', data); // data có thể chứa { bookIds: [] }\nexport const submitBorrowSlip = slipId => apiClient.post(`/borrow/slips/${slipId}/submit`);\nexport const deleteBorrowSlip = slipId => apiClient.delete(`/borrow/slips/${slipId}`);\n// Thêm các hàm khác nếu cần: getBorrowSlipDetails, updateSlipItems\n\n// --- Users (MỚI) ---\n/** Lấy danh sách tất cả người dùng (yêu cầu quyền Admin ở backend) */\nexport const getUsers = () => apiClient.get('/users');\n\n/** Tạo người dùng mới (yêu cầu quyền Admin ở backend) */\nexport const createUser = userData => apiClient.post('/users', userData); // userData: { username, password, role_id }\n\n/** Cập nhật vai trò người dùng (yêu cầu quyền Admin ở backend) */\nexport const updateUserRole = (userId, roleId) => apiClient.put(`/users/${userId}`, {\n  role_id: roleId\n});\n\n// --- Roles (MỚI) ---\n/** Lấy danh sách vai trò */\nexport const getRoles = () => apiClient.get('/roles');\nexport default apiClient;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","apiClient","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","console","log","url","error","Promise","reject","loginUser","credentials","post","registerUser","userData","getBooks","get","createBook","bookData","updateBook","bookId","put","deleteBook","delete","getCategories","getMyBorrows","createBorrowSlip","data","submitBorrowSlip","slipId","deleteBorrowSlip","getUsers","createUser","updateUserRole","userId","roleId","role_id","getRoles"],"sources":["D:/HK3-N2/ANTOANHETHONGWEB/BT5/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Đặt URL backend của bạn ở đây.\r\n// Nếu bạn đặt nó trong .env, hãy đọc từ process.env.REACT_APP_API_URL\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000/api';\r\n\r\nconst apiClient = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Interceptor để tự động thêm token vào các yêu cầu cần xác thực\r\napiClient.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('authToken');\r\n    console.log('[Axios Interceptor] Checking for token. Found:', !!token); // Log xem có token không\r\n    if (token) {\r\n      config.headers['Authorization'] = `Bearer ${token}`;\r\n      console.log('[Axios Interceptor] Token added to header for URL:', config.url); // Log URL được thêm token\r\n    } else {\r\n      console.log('[Axios Interceptor] No token found in localStorage for URL:', config.url);\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    console.error('[Axios Interceptor] Request error:', error); // Log lỗi request interceptor\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// --- Hàm gọi API ---\r\n\r\n// Auth\r\nexport const loginUser = (credentials) => apiClient.post('/auth/login', credentials);\r\nexport const registerUser = (userData) => apiClient.post('/auth/register', userData);\r\n// Optional: Thêm hàm verify token nếu có endpoint /api/auth/verify hoặc /api/users/me\r\n\r\n// Books\r\nexport const getBooks = () => apiClient.get('/books');\r\nexport const createBook = (bookData) => apiClient.post('/books', bookData);\r\nexport const updateBook = (bookId, bookData) => apiClient.put(`/books/${bookId}`, bookData);\r\nexport const deleteBook = (bookId) => apiClient.delete(`/books/${bookId}`);\r\n\r\n// Categories (Cần cho dropdown)\r\nexport const getCategories = () => apiClient.get('/categories');\r\n\r\n// Borrows\r\nexport const getMyBorrows = () => apiClient.get('/borrow/slips');\r\nexport const createBorrowSlip = (data = {}) => apiClient.post('/borrow/slips', data); // data có thể chứa { bookIds: [] }\r\nexport const submitBorrowSlip = (slipId) => apiClient.post(`/borrow/slips/${slipId}/submit`);\r\nexport const deleteBorrowSlip = (slipId) => apiClient.delete(`/borrow/slips/${slipId}`);\r\n// Thêm các hàm khác nếu cần: getBorrowSlipDetails, updateSlipItems\r\n\r\n// --- Users (MỚI) ---\r\n/** Lấy danh sách tất cả người dùng (yêu cầu quyền Admin ở backend) */\r\nexport const getUsers = () => apiClient.get('/users');\r\n\r\n/** Tạo người dùng mới (yêu cầu quyền Admin ở backend) */\r\nexport const createUser = (userData) => apiClient.post('/users', userData); // userData: { username, password, role_id }\r\n\r\n/** Cập nhật vai trò người dùng (yêu cầu quyền Admin ở backend) */\r\nexport const updateUserRole = (userId, roleId) => apiClient.put(`/users/${userId}`, { role_id: roleId });\r\n\r\n// --- Roles (MỚI) ---\r\n/** Lấy danh sách vai trò */\r\nexport const getRoles = () => apiClient.get('/roles');\r\n\r\n\r\nexport default apiClient;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}