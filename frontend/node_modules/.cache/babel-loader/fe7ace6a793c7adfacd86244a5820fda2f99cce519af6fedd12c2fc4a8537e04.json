{"ast":null,"code":"var _jsxFileName = \"D:\\\\HK3-N2\\\\ANTOANHETHONGWEB\\\\BT5\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext, useCallback } from 'react';\n\n// 1. Tạo Context Object\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\n\n// 2. Tạo Provider Component\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  // --- State Management ---\n  // Khởi tạo state ban đầu là null/false, sẽ được cập nhật từ localStorage hoặc login\n  const [authToken, setAuthToken] = useState(null);\n  const [userRole, setUserRole] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isLoading, setIsLoading] = useState(true); // Bắt đầu ở trạng thái loading\n\n  // --- Hàm kiểm tra trạng thái xác thực ban đầu ---\n  // Sử dụng useCallback để tối ưu, chỉ tạo lại khi cần (ở đây không có dependency nên chỉ tạo 1 lần)\n  const checkAuthStatus = useCallback(() => {\n    console.log('[AuthContext Check] Starting initial auth check...');\n    setIsLoading(true); // Bắt đầu loading\n    try {\n      // Lấy dữ liệu từ localStorage\n      const token = localStorage.getItem('authToken');\n      const role = localStorage.getItem('userRole');\n      console.log(`[AuthContext Check] Token from storage: ${token ? 'Found' : 'Missing'}`);\n      console.log(`[AuthContext Check] Role from storage: ${role || 'Missing'}`);\n\n      // Chỉ coi là đã đăng nhập nếu cả token và role đều tồn tại\n      if (token && role) {\n        // TODO (Nâng cao): Gọi API backend để xác thực token có thực sự hợp lệ không.\n        // Nếu không hợp lệ, gọi logout() ở đây.\n        // Ví dụ:\n        // verifyTokenOnServer(token).then(() => { ... }).catch(() => logout());\n\n        // Giả định token hợp lệ cho demo\n        setAuthToken(token);\n        setUserRole(role);\n        setIsAuthenticated(true);\n        console.log(`[AuthContext Check] Status: Authenticated as ${role}`);\n      } else {\n        // Nếu thiếu 1 trong 2, đảm bảo trạng thái là chưa đăng nhập và storage sạch\n        localStorage.removeItem('authToken');\n        localStorage.removeItem('userRole');\n        setAuthToken(null);\n        setUserRole(null);\n        setIsAuthenticated(false);\n        console.log('[AuthContext Check] Status: Not Authenticated');\n      }\n    } catch (error) {\n      // Xử lý lỗi nếu có vấn đề khi đọc localStorage (rất hiếm)\n      console.error(\"[AuthContext Check] Error reading from localStorage:\", error);\n      setAuthToken(null);\n      setUserRole(null);\n      setIsAuthenticated(false);\n    } finally {\n      setIsLoading(false); // Kết thúc loading dù thành công hay thất bại\n      console.log('[AuthContext Check] Initial check finished.');\n    }\n  }, []); // Không có dependencies bên ngoài, chỉ chạy 1 lần\n\n  // Chạy kiểm tra trạng thái ban đầu khi Provider được mount\n  useEffect(() => {\n    checkAuthStatus();\n  }, [checkAuthStatus]); // Dependency là chính hàm checkAuthStatus\n\n  // --- Hàm Xử lý Logout ---\n  // Đặt logout ở đây để login có thể gọi nó nếu dữ liệu không hợp lệ\n  const logout = useCallback(() => {\n    console.log('[AuthContext Logout] Logging out...');\n    try {\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('userRole');\n      console.log('[AuthContext Logout] Removed items from localStorage.');\n    } catch (error) {\n      console.error(\"[AuthContext Logout] Error removing items from localStorage:\", error);\n    } finally {\n      // Luôn reset state dù có lỗi storage hay không\n      setAuthToken(null);\n      setUserRole(null);\n      setIsAuthenticated(false);\n      console.log('[AuthContext Logout] State reset.');\n    }\n  }, []); // Không có dependencies\n\n  // --- Hàm Xử lý Login ---\n  // Sử dụng useCallback và đưa logout vào dependency array\n  const login = useCallback(loginData => {\n    console.log('[AuthContext Login] Attempting login with data:', loginData);\n\n    // Kiểm tra dữ liệu đầu vào nghiêm ngặt hơn\n    if (loginData && typeof loginData === 'object' && typeof loginData.token === 'string' && loginData.token.length > 0 &&\n    // Token phải là chuỗi không rỗng\n    typeof loginData.role_name === 'string' && loginData.role_name.length > 0)\n      // role_name phải là chuỗi không rỗng\n      {\n        const token = loginData.token;\n        const roleName = loginData.role_name;\n        console.log(`[AuthContext Login] Data validated. Role: ${roleName}`);\n        try {\n          // Cập nhật localStorage\n          localStorage.setItem('authToken', token);\n          localStorage.setItem('userRole', roleName);\n          console.log('[AuthContext Login] Saved token and role to localStorage.');\n\n          // Cập nhật State\n          setAuthToken(token);\n          setUserRole(roleName);\n          setIsAuthenticated(true); // <<< Cập nhật trạng thái đăng nhập thành công\n          console.log(`[AuthContext Login] State updated. Logged in as ${roleName}. IsAuthenticated: true`);\n        } catch (error) {\n          // Lỗi nghiêm trọng khi lưu trữ hoặc cập nhật state\n          console.error(\"[AuthContext Login] CRITICAL ERROR during storage/state update:\", error);\n          // Gọi logout để đảm bảo trạng thái sạch sẽ\n          logout();\n        }\n      } else {\n      // Dữ liệu login không hợp lệ hoặc thiếu\n      console.error(\"[AuthContext Login] Invalid or incomplete login data received. Logging out.\", loginData);\n      // Gọi logout để reset trạng thái\n      logout();\n    }\n  }, [logout]); // logout là dependency vì nó được gọi bên trong\n\n  // --- Cung cấp Giá trị Context ---\n  // Tạo object chứa các giá trị và hàm sẽ được cung cấp\n  const contextValue = {\n    authToken,\n    isAuthenticated,\n    isLoading,\n    userRole,\n    login,\n    logout\n  };\n\n  // Provider trả về Context.Provider với giá trị đã tạo\n  // Chỉ render children khi không còn loading ban đầu\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 5\n  }, this);\n};\n\n// 3. Tạo Custom Hook để dễ dàng sử dụng Context\n_s(AuthProvider, \"VnyFfhszi82L0L2pBvj7vNgIBcQ=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  // Kiểm tra xem hook có được dùng bên trong Provider không\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","useCallback","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","authToken","setAuthToken","userRole","setUserRole","isAuthenticated","setIsAuthenticated","isLoading","setIsLoading","checkAuthStatus","console","log","token","localStorage","getItem","role","removeItem","error","logout","login","loginData","length","role_name","roleName","setItem","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","undefined","Error","$RefreshReg$"],"sources":["D:/HK3-N2/ANTOANHETHONGWEB/BT5/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext, useCallback } from 'react';\r\n\r\n// 1. Tạo Context Object\r\nconst AuthContext = createContext(null);\r\n\r\n// 2. Tạo Provider Component\r\nexport const AuthProvider = ({ children }) => {\r\n  // --- State Management ---\r\n  // Khởi tạo state ban đầu là null/false, sẽ được cập nhật từ localStorage hoặc login\r\n  const [authToken, setAuthToken] = useState(null);\r\n  const [userRole, setUserRole] = useState(null);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(true); // Bắt đầu ở trạng thái loading\r\n\r\n  // --- Hàm kiểm tra trạng thái xác thực ban đầu ---\r\n  // Sử dụng useCallback để tối ưu, chỉ tạo lại khi cần (ở đây không có dependency nên chỉ tạo 1 lần)\r\n  const checkAuthStatus = useCallback(() => {\r\n    console.log('[AuthContext Check] Starting initial auth check...');\r\n    setIsLoading(true); // Bắt đầu loading\r\n    try {\r\n      // Lấy dữ liệu từ localStorage\r\n      const token = localStorage.getItem('authToken');\r\n      const role = localStorage.getItem('userRole');\r\n      console.log(`[AuthContext Check] Token from storage: ${token ? 'Found' : 'Missing'}`);\r\n      console.log(`[AuthContext Check] Role from storage: ${role || 'Missing'}`);\r\n\r\n      // Chỉ coi là đã đăng nhập nếu cả token và role đều tồn tại\r\n      if (token && role) {\r\n        // TODO (Nâng cao): Gọi API backend để xác thực token có thực sự hợp lệ không.\r\n        // Nếu không hợp lệ, gọi logout() ở đây.\r\n        // Ví dụ:\r\n        // verifyTokenOnServer(token).then(() => { ... }).catch(() => logout());\r\n\r\n        // Giả định token hợp lệ cho demo\r\n        setAuthToken(token);\r\n        setUserRole(role);\r\n        setIsAuthenticated(true);\r\n        console.log(`[AuthContext Check] Status: Authenticated as ${role}`);\r\n      } else {\r\n        // Nếu thiếu 1 trong 2, đảm bảo trạng thái là chưa đăng nhập và storage sạch\r\n        localStorage.removeItem('authToken');\r\n        localStorage.removeItem('userRole');\r\n        setAuthToken(null);\r\n        setUserRole(null);\r\n        setIsAuthenticated(false);\r\n        console.log('[AuthContext Check] Status: Not Authenticated');\r\n      }\r\n    } catch (error) {\r\n        // Xử lý lỗi nếu có vấn đề khi đọc localStorage (rất hiếm)\r\n        console.error(\"[AuthContext Check] Error reading from localStorage:\", error);\r\n        setAuthToken(null);\r\n        setUserRole(null);\r\n        setIsAuthenticated(false);\r\n    } finally {\r\n        setIsLoading(false); // Kết thúc loading dù thành công hay thất bại\r\n        console.log('[AuthContext Check] Initial check finished.');\r\n    }\r\n  }, []); // Không có dependencies bên ngoài, chỉ chạy 1 lần\r\n\r\n  // Chạy kiểm tra trạng thái ban đầu khi Provider được mount\r\n  useEffect(() => {\r\n    checkAuthStatus();\r\n  }, [checkAuthStatus]); // Dependency là chính hàm checkAuthStatus\r\n\r\n\r\n  // --- Hàm Xử lý Logout ---\r\n  // Đặt logout ở đây để login có thể gọi nó nếu dữ liệu không hợp lệ\r\n  const logout = useCallback(() => {\r\n    console.log('[AuthContext Logout] Logging out...');\r\n    try {\r\n        localStorage.removeItem('authToken');\r\n        localStorage.removeItem('userRole');\r\n        console.log('[AuthContext Logout] Removed items from localStorage.');\r\n    } catch (error) {\r\n        console.error(\"[AuthContext Logout] Error removing items from localStorage:\", error);\r\n    } finally {\r\n        // Luôn reset state dù có lỗi storage hay không\r\n        setAuthToken(null);\r\n        setUserRole(null);\r\n        setIsAuthenticated(false);\r\n        console.log('[AuthContext Logout] State reset.');\r\n    }\r\n  }, []); // Không có dependencies\r\n\r\n\r\n  // --- Hàm Xử lý Login ---\r\n  // Sử dụng useCallback và đưa logout vào dependency array\r\n  const login = useCallback((loginData) => {\r\n    console.log('[AuthContext Login] Attempting login with data:', loginData);\r\n\r\n    // Kiểm tra dữ liệu đầu vào nghiêm ngặt hơn\r\n    if (loginData && typeof loginData === 'object' &&\r\n        typeof loginData.token === 'string' && loginData.token.length > 0 && // Token phải là chuỗi không rỗng\r\n        typeof loginData.role_name === 'string' && loginData.role_name.length > 0) // role_name phải là chuỗi không rỗng\r\n    {\r\n      const token = loginData.token;\r\n      const roleName = loginData.role_name;\r\n      console.log(`[AuthContext Login] Data validated. Role: ${roleName}`);\r\n\r\n      try {\r\n        // Cập nhật localStorage\r\n        localStorage.setItem('authToken', token);\r\n        localStorage.setItem('userRole', roleName);\r\n        console.log('[AuthContext Login] Saved token and role to localStorage.');\r\n\r\n        // Cập nhật State\r\n        setAuthToken(token);\r\n        setUserRole(roleName);\r\n        setIsAuthenticated(true); // <<< Cập nhật trạng thái đăng nhập thành công\r\n        console.log(`[AuthContext Login] State updated. Logged in as ${roleName}. IsAuthenticated: true`);\r\n\r\n      } catch (error) {\r\n        // Lỗi nghiêm trọng khi lưu trữ hoặc cập nhật state\r\n        console.error(\"[AuthContext Login] CRITICAL ERROR during storage/state update:\", error);\r\n        // Gọi logout để đảm bảo trạng thái sạch sẽ\r\n        logout();\r\n      }\r\n\r\n    } else {\r\n      // Dữ liệu login không hợp lệ hoặc thiếu\r\n      console.error(\"[AuthContext Login] Invalid or incomplete login data received. Logging out.\", loginData);\r\n      // Gọi logout để reset trạng thái\r\n      logout();\r\n    }\r\n  }, [logout]); // logout là dependency vì nó được gọi bên trong\r\n\r\n\r\n  // --- Cung cấp Giá trị Context ---\r\n  // Tạo object chứa các giá trị và hàm sẽ được cung cấp\r\n  const contextValue = {\r\n    authToken,\r\n    isAuthenticated,\r\n    isLoading,\r\n    userRole,\r\n    login,\r\n    logout\r\n  };\r\n\r\n  // Provider trả về Context.Provider với giá trị đã tạo\r\n  // Chỉ render children khi không còn loading ban đầu\r\n  return (\r\n    <AuthContext.Provider value={contextValue}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n// 3. Tạo Custom Hook để dễ dàng sử dụng Context\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  // Kiểm tra xem hook có được dùng bên trong Provider không\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}