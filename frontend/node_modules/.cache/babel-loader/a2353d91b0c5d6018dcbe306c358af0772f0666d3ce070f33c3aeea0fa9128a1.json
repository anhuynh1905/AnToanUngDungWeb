{"ast":null,"code":"import axios from 'axios';\n\n// Đặt URL backend của bạn ở đây.\n// Nếu bạn đặt nó trong .env, hãy đọc từ process.env.REACT_APP_API_URL\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000/api';\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Interceptor để tự động thêm token vào các yêu cầu cần xác thực\napiClient.interceptors.request.use(config => {\n  const token = localStorage.getItem('authToken');\n  if (token && !config.headers['Authorization']) {\n    // Chỉ thêm nếu chưa có header Auth\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// --- Hàm gọi API ---\n\n// Auth\nexport const loginUser = credentials => apiClient.post('/auth/login', credentials);\nexport const registerUser = userData => apiClient.post('/auth/register', userData);\n// Optional: Thêm hàm verify token nếu có endpoint /api/auth/verify hoặc /api/users/me\n\n// Books\nexport const getBooks = () => apiClient.get('/books');\n// Thêm các hàm khác nếu cần: getBookById, createBook, updateBook, deleteBook\n\n// Borrows\nexport const getMyBorrows = () => apiClient.get('/borrow/slips');\nexport const createBorrowSlip = (data = {}) => apiClient.post('/borrow/slips', data); // data có thể chứa { bookIds: [] }\nexport const submitBorrowSlip = slipId => apiClient.post(`/borrow/slips/${slipId}/submit`);\nexport const deleteBorrowSlip = slipId => apiClient.delete(`/borrow/slips/${slipId}`);\n// Thêm các hàm khác nếu cần: getBorrowSlipDetails, updateSlipItems\n\nexport default apiClient; // Export instance nếu cần dùng trực tiếp","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","apiClient","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","error","Promise","reject","loginUser","credentials","post","registerUser","userData","getBooks","get","getMyBorrows","createBorrowSlip","data","submitBorrowSlip","slipId","deleteBorrowSlip","delete"],"sources":["D:/HK3-N2/ANTOANHETHONGWEB/BT5/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Đặt URL backend của bạn ở đây.\r\n// Nếu bạn đặt nó trong .env, hãy đọc từ process.env.REACT_APP_API_URL\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000/api';\r\n\r\nconst apiClient = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Interceptor để tự động thêm token vào các yêu cầu cần xác thực\r\napiClient.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('authToken');\r\n    if (token && !config.headers['Authorization']) { // Chỉ thêm nếu chưa có header Auth\r\n      config.headers['Authorization'] = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// --- Hàm gọi API ---\r\n\r\n// Auth\r\nexport const loginUser = (credentials) => apiClient.post('/auth/login', credentials);\r\nexport const registerUser = (userData) => apiClient.post('/auth/register', userData);\r\n// Optional: Thêm hàm verify token nếu có endpoint /api/auth/verify hoặc /api/users/me\r\n\r\n// Books\r\nexport const getBooks = () => apiClient.get('/books');\r\n// Thêm các hàm khác nếu cần: getBookById, createBook, updateBook, deleteBook\r\n\r\n// Borrows\r\nexport const getMyBorrows = () => apiClient.get('/borrow/slips');\r\nexport const createBorrowSlip = (data = {}) => apiClient.post('/borrow/slips', data); // data có thể chứa { bookIds: [] }\r\nexport const submitBorrowSlip = (slipId) => apiClient.post(`/borrow/slips/${slipId}/submit`);\r\nexport const deleteBorrowSlip = (slipId) => apiClient.delete(`/borrow/slips/${slipId}`);\r\n// Thêm các hàm khác nếu cần: getBorrowSlipDetails, updateSlipItems\r\n\r\nexport default apiClient; // Export instance nếu cần dùng trực tiếp"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA;AACA,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;AAEjF,MAAMC,SAAS,GAAGL,KAAK,CAACM,MAAM,CAAC;EAC7BC,OAAO,EAAEN,YAAY;EACrBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,SAAS,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAC/BC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;EAC/C,IAAIF,KAAK,IAAI,CAACD,MAAM,CAACJ,OAAO,CAAC,eAAe,CAAC,EAAE;IAAE;IAC/CI,MAAM,CAACJ,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUK,KAAK,EAAE;EACrD;EACA,OAAOD,MAAM;AACf,CAAC,EACAI,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;;AAEA;AACA,OAAO,MAAMG,SAAS,GAAIC,WAAW,IAAKf,SAAS,CAACgB,IAAI,CAAC,aAAa,EAAED,WAAW,CAAC;AACpF,OAAO,MAAME,YAAY,GAAIC,QAAQ,IAAKlB,SAAS,CAACgB,IAAI,CAAC,gBAAgB,EAAEE,QAAQ,CAAC;AACpF;;AAEA;AACA,OAAO,MAAMC,QAAQ,GAAGA,CAAA,KAAMnB,SAAS,CAACoB,GAAG,CAAC,QAAQ,CAAC;AACrD;;AAEA;AACA,OAAO,MAAMC,YAAY,GAAGA,CAAA,KAAMrB,SAAS,CAACoB,GAAG,CAAC,eAAe,CAAC;AAChE,OAAO,MAAME,gBAAgB,GAAGA,CAACC,IAAI,GAAG,CAAC,CAAC,KAAKvB,SAAS,CAACgB,IAAI,CAAC,eAAe,EAAEO,IAAI,CAAC,CAAC,CAAC;AACtF,OAAO,MAAMC,gBAAgB,GAAIC,MAAM,IAAKzB,SAAS,CAACgB,IAAI,CAAC,iBAAiBS,MAAM,SAAS,CAAC;AAC5F,OAAO,MAAMC,gBAAgB,GAAID,MAAM,IAAKzB,SAAS,CAAC2B,MAAM,CAAC,iBAAiBF,MAAM,EAAE,CAAC;AACvF;;AAEA,eAAezB,SAAS,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}