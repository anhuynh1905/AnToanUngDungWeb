{"ast":null,"code":"var _jsxFileName = \"D:\\\\HK3-N2\\\\ANTOANHETHONGWEB\\\\BT5\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext, useCallback } from 'react';\n// Optional: Import API client nếu bạn cần verify token\n// import apiClient from '../services/api';\n\n// Tạo Context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\n\n// Tạo Provider Component\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  // Lấy giá trị ban đầu từ localStorage\n  const [authToken, setAuthToken] = useState(localStorage.getItem('authToken'));\n  const [userRole, setUserRole] = useState(localStorage.getItem('userRole')); // State cho vai trò\n  const [isAuthenticated, setIsAuthenticated] = useState(!!localStorage.getItem('authToken'));\n  const [isLoading, setIsLoading] = useState(true); // State cho trạng thái loading ban đầu\n\n  // Hàm kiểm tra token và role ban đầu khi tải ứng dụng\n  const checkAuthStatus = useCallback(() => {\n    setIsLoading(true); // Bắt đầu kiểm tra\n    const token = localStorage.getItem('authToken');\n    const role = localStorage.getItem('userRole');\n    console.log('Auth Check - Token from storage:', token);\n    console.log('Auth Check - Role from storage:', role);\n\n    // Chỉ xác thực nếu cả token và role đều tồn tại trong storage\n    if (token && role) {\n      // TODO (Nâng cao): Gọi API backend để xác thực token thực sự còn hợp lệ không.\n      // Nếu không hợp lệ thì gọi logout() ở đây.\n      // Ví dụ:\n      // apiClient.get('/auth/verify').then(() => { ... }).catch(() => logout());\n\n      // Giả định token còn hợp lệ cho demo\n      setAuthToken(token);\n      setUserRole(role);\n      setIsAuthenticated(true);\n      console.log(`Auth Check - Status: Authenticated as ${role}`);\n    } else {\n      // Nếu thiếu 1 trong 2, coi như chưa đăng nhập và dọn dẹp storage\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('userRole');\n      setAuthToken(null);\n      setUserRole(null);\n      setIsAuthenticated(false);\n      console.log('Auth Check - Status: Not Authenticated');\n    }\n    setIsLoading(false); // Kết thúc kiểm tra\n  }, []); // useCallback để tránh tạo lại hàm không cần thiết\n\n  // Chạy kiểm tra auth khi component Provider mount lần đầu\n  useEffect(() => {\n    checkAuthStatus();\n  }, [checkAuthStatus]);\n\n  // Hàm xử lý khi đăng nhập thành công\n  const login = useCallback(loginData => {\n    console.log('AuthContext login received:', loginData);\n    // loginData mong đợi có dạng { token: '...', role_name: '...' } từ API\n    if (loginData && loginData.token && loginData.role_name) {\n      localStorage.setItem('authToken', loginData.token);\n      localStorage.setItem('userRole', loginData.role_name); // Lưu role vào storage\n      setAuthToken(loginData.token);\n      setUserRole(loginData.role_name); // Cập nhật state role\n      setIsAuthenticated(true);\n      console.log(`AuthContext: Logged in as ${loginData.role_name}.`);\n    } else {\n      console.error(\"AuthContext: Invalid login data for context update.\", loginData);\n      // Nếu dữ liệu login không đúng, đảm bảo trạng thái là logout\n      logout(); // Gọi logout để dọn dẹp\n    }\n  }, []); // Thêm logout vào dependencies nếu logout được định nghĩa bên ngoài\n\n  // Hàm xử lý khi đăng xuất\n  const logout = useCallback(() => {\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('userRole'); // Xóa role khỏi storage\n    setAuthToken(null);\n    setUserRole(null); // Reset state role\n    setIsAuthenticated(false);\n    console.log(\"AuthContext: Logged out.\");\n    // Việc navigate sẽ do component gọi logout xử lý (ví dụ: Navbar)\n  }, []);\n\n  // Giá trị cung cấp bởi Context\n  const value = {\n    authToken,\n    isAuthenticated,\n    isLoading,\n    userRole,\n    // <<< Cung cấp userRole\n    login,\n    logout\n  };\n\n  // Chỉ render children khi không còn loading (để tránh lỗi render sai)\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook để sử dụng context\n_s(AuthProvider, \"at1HSoQp5aj46tRErQay9BMbeKo=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","useCallback","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","authToken","setAuthToken","localStorage","getItem","userRole","setUserRole","isAuthenticated","setIsAuthenticated","isLoading","setIsLoading","checkAuthStatus","token","role","console","log","removeItem","login","loginData","role_name","setItem","error","logout","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","undefined","Error","$RefreshReg$"],"sources":["D:/HK3-N2/ANTOANHETHONGWEB/BT5/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext, useCallback } from 'react';\r\n// Optional: Import API client nếu bạn cần verify token\r\n// import apiClient from '../services/api';\r\n\r\n// Tạo Context\r\nconst AuthContext = createContext(null);\r\n\r\n// Tạo Provider Component\r\nexport const AuthProvider = ({ children }) => {\r\n  // Lấy giá trị ban đầu từ localStorage\r\n  const [authToken, setAuthToken] = useState(localStorage.getItem('authToken'));\r\n  const [userRole, setUserRole] = useState(localStorage.getItem('userRole')); // State cho vai trò\r\n  const [isAuthenticated, setIsAuthenticated] = useState(!!localStorage.getItem('authToken'));\r\n  const [isLoading, setIsLoading] = useState(true); // State cho trạng thái loading ban đầu\r\n\r\n  // Hàm kiểm tra token và role ban đầu khi tải ứng dụng\r\n  const checkAuthStatus = useCallback(() => {\r\n    setIsLoading(true); // Bắt đầu kiểm tra\r\n    const token = localStorage.getItem('authToken');\r\n    const role = localStorage.getItem('userRole');\r\n    console.log('Auth Check - Token from storage:', token);\r\n    console.log('Auth Check - Role from storage:', role);\r\n\r\n    // Chỉ xác thực nếu cả token và role đều tồn tại trong storage\r\n    if (token && role) {\r\n      // TODO (Nâng cao): Gọi API backend để xác thực token thực sự còn hợp lệ không.\r\n      // Nếu không hợp lệ thì gọi logout() ở đây.\r\n      // Ví dụ:\r\n      // apiClient.get('/auth/verify').then(() => { ... }).catch(() => logout());\r\n\r\n      // Giả định token còn hợp lệ cho demo\r\n      setAuthToken(token);\r\n      setUserRole(role);\r\n      setIsAuthenticated(true);\r\n      console.log(`Auth Check - Status: Authenticated as ${role}`);\r\n    } else {\r\n      // Nếu thiếu 1 trong 2, coi như chưa đăng nhập và dọn dẹp storage\r\n      localStorage.removeItem('authToken');\r\n      localStorage.removeItem('userRole');\r\n      setAuthToken(null);\r\n      setUserRole(null);\r\n      setIsAuthenticated(false);\r\n      console.log('Auth Check - Status: Not Authenticated');\r\n    }\r\n    setIsLoading(false); // Kết thúc kiểm tra\r\n  }, []); // useCallback để tránh tạo lại hàm không cần thiết\r\n\r\n  // Chạy kiểm tra auth khi component Provider mount lần đầu\r\n  useEffect(() => {\r\n    checkAuthStatus();\r\n  }, [checkAuthStatus]);\r\n\r\n  // Hàm xử lý khi đăng nhập thành công\r\n  const login = useCallback((loginData) => {\r\n    console.log('AuthContext login received:', loginData);\r\n    // loginData mong đợi có dạng { token: '...', role_name: '...' } từ API\r\n    if (loginData && loginData.token && loginData.role_name) {\r\n      localStorage.setItem('authToken', loginData.token);\r\n      localStorage.setItem('userRole', loginData.role_name); // Lưu role vào storage\r\n      setAuthToken(loginData.token);\r\n      setUserRole(loginData.role_name); // Cập nhật state role\r\n      setIsAuthenticated(true);\r\n      console.log(`AuthContext: Logged in as ${loginData.role_name}.`);\r\n    } else {\r\n      console.error(\"AuthContext: Invalid login data for context update.\", loginData);\r\n      // Nếu dữ liệu login không đúng, đảm bảo trạng thái là logout\r\n      logout(); // Gọi logout để dọn dẹp\r\n    }\r\n  }, []); // Thêm logout vào dependencies nếu logout được định nghĩa bên ngoài\r\n\r\n  // Hàm xử lý khi đăng xuất\r\n  const logout = useCallback(() => {\r\n    localStorage.removeItem('authToken');\r\n    localStorage.removeItem('userRole'); // Xóa role khỏi storage\r\n    setAuthToken(null);\r\n    setUserRole(null); // Reset state role\r\n    setIsAuthenticated(false);\r\n    console.log(\"AuthContext: Logged out.\");\r\n    // Việc navigate sẽ do component gọi logout xử lý (ví dụ: Navbar)\r\n  }, []);\r\n\r\n  // Giá trị cung cấp bởi Context\r\n  const value = {\r\n      authToken,\r\n      isAuthenticated,\r\n      isLoading,\r\n      userRole, // <<< Cung cấp userRole\r\n      login,\r\n      logout\r\n    };\r\n\r\n  // Chỉ render children khi không còn loading (để tránh lỗi render sai)\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook để sử dụng context\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}